<div class="topic-new-wrapper">

    <div class="container search-form">
        <div class="row">
            <div class="col-md-6 col-md-offset-3">
                <div class="search-form">
                    <h1>スポット検索</h1>
                    <form class="form-inline">
                        <div class="input-group">
                            <%= form_tag(search_topics_path,:method => 'get') do %>
                                <div class="form-search-input">
                                <%= text_field_tag :search ,"", {class: 'form-control', id: 'inlineFormInputGroup', placeholder: "最寄駅を入力してください。"} %>
                                <div class="input-group-append">
                                    <%= button_tag :type => "submit", :class =>"btn btn-primary" do %>
                                        <i class="fas fa-search fa-lg"></i>
                                    <% end %>
                                </div>
                                </div>
                            <% end %>
                        </div>
                    </form>
                </div>

                <div id='map'></div>

                <div class="topic-contents">
                    <% unless @topics.nil? %>
                        <% @topics.each do |topic| %>
                            <div class="search-topic" >
                                <div class="card card-topic">
                                    <div class="card-body">
                                        <h5 class="card-title card-title-topic"><b><%= topic.title %></b></h5>
                                        <div class="picture-container">
                                            <div class="topic-picture-sch">
                                                <% unless topic.picture_1.url.nil? %>
                                                    <%= image_tag topic.picture_1.url, class: "show_image" %>
                                                <% end %>
                                            </div>
                                            <div class="topic-picture-sch">
                                                <% unless topic.picture_2.url.nil? %>
                                                    <%= image_tag topic.picture_2.url, class: "show_image" %>
                                                <% end %>
                                            </div>
                                            <div class="topic-picture-sch">
                                                <% unless topic.picture_3.url.nil? %>
                                                    <%= image_tag topic.picture_3.url, class: "show_image" %>
                                                <% end %>
                                            </div>
                                        </div>
                                        <p class="card-text">投稿者コメント：<%= topic.description %></p>
                                        <p class="card-text">最寄駅　　　　：<%= topic.station %></p>
                                        <h5 class="card-subtitle my-2">
                                            <ul calss="pull-right">
                                                <li>投稿日：<%= topic.created_at.strftime('%Y/%m/%d %H:%M:%S') %></li>
                                                <li>投稿者：<%= topic.user.name %></li>
                                            </ul>
                                        </h6>
                                        <div class="topic-link-container">
                                        <a class="btn btn-primary to-show-button" href="/topics/<%= topic.id %>">投稿へ →</a>
                                            <div class="favorite-container favorite-part" id="favorite-button-<%= topic.id %>">
                                                <%= render 'favorites/favorite', topic: topic %>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <%= hidden_field_tag :topic_latitude, topic.latitude, id: "latitude_#{topic.id}" %>
                            <%= hidden_field_tag :topic_longitude, topic.longitude, id: "longitude_#{topic.id}" %>
                        <% end %>
                    <% end %>
                </div>
            </div>
        </div>
    </div>
</div>

<script>



function initMap(){
    var geocoder
    const topics = gon.topics //controllerから検索結果のtopicsを取得（上位５件に絞っている。）
    let marker = []; //マーカーは上位５件を表示
    let infoWindow = []; //吹き出しも上位５件表示
    var latitude = [];
    var longitude = [];
    const my_station = gon.station

    geocoder = new google.maps.Geocoder()

    var map = new google.maps.Map(document.getElementById('map'));//地図を作成する

    geo(aftergeo);

    function geo(callback){
        var cRef = topics.length;
        // gonで定義したtopics分繰り返し加える処理を行う
        for (var i = 0; i < topics.length; i++) {
            // topicsの緯度経度を取得
            latitude[i] = topics[i]['latitude'];
            longitude[i] = topics[i]['longitude'];

            (function(i) {
                geocoder.geocode( { 'address': my_station }, function(results, status) {
                    if (status == 'OK') {// statusがOKであれば
                        mylatlng = results[0].geometry.location;
                        marker[i] = new google.maps.Marker({
                            position: {lat: latitude[i], lng:longitude[i]},
                            map: map
                        });
                        // 変数iを変数idに代入
                        let id = topics[i]['id']
                        let No = i + 1
                        // infoWindowは吹き出し
                        infoWindow[i] = new google.maps.InfoWindow({
                            // contentで中身を指定
                            // 文字にリンクを貼り付けた形で表示
                            content: `No${No}：<a href='/topics/${id}' class='map_link'>${topics[i].title}</a>`
                        });
                        // markerがクリックされた時、
                        marker[i].addListener("click", function(){
                            // infoWindowを表示
                            infoWindow[i].open(map, marker[i]);
                        });
                    } else {// 失敗した場合
                    }//if文の終了。
                    if (--cRef <= 0) {
                        callback();//全て取得できたらaftergeo実行
                    }
                });////function(results, status)及びgeocoder.geocodeの終了
            }) (i);
        } //for文の終了
    }//function geo終了

    function aftergeo(){
        var opt = {
            center: mylatlng,
            zoom: 16 // 地図のズームを指定
        };//地図作成のオプションのうちcenterとzoomは必須
        map.setOptions(opt);//オプションをmapにセット
    }//function aftergeo終了
};//function initMap終了





// function initMap(){
//     geocoder = new google.maps.Geocoder()

//     map = new google.maps.Map(document.getElementById('map'), {
//         center: {lat: 35.728860, lng:139.711814},
//         zoom: 16,
//     });

// }

// function map_click(){
//     // geocoderを初期化
//     geocoder = new google.maps.Geocoder()
    
//     // mapの初期位置設定
//     map = new google.maps.Map(document.getElementById('map'), {
//     center: {lat: 35.729503, lng:139.7109},
//     zoom: 16,
// });

//     // forは繰り返し処理
//     // 変数iを0と定義し、
//     // その後gonで定義したtopics分繰り返し加える処理を行う(上限５回)
//     for (let i = 0; i < topics.length; i++) {
//         // geocoderで addressの経緯緯度取得
//         // users[i]は変数iのユーザーを取得している
//         alert(topics[i].station);
//         geocoder.geocode( { 'address': topics[i].station }, function(results, status) {
//             // statusがOKであれば
//         if (status == 'OK') {
//     　　　　// map.setCenterで地図が移動
//             map.setCenter(results[0].geometry.location);
//             marker[i] = new google.maps.Marker({
//                 map: map,
//                 position: results[0].geometry.location
//             });
//             // 変数iを変数idに代入
//             let id = topics[i]['id']
//             // infoWindowは吹き出し
//             infoWindow[i] = new google.maps.InfoWindow({
//             // contentで中身を指定
//             // 今回は文字にリンクを貼り付けた形で表示
//             content: `<a href='/mypages/index'>${topics[i].title}</a>`
//             });
//             // markerがクリックされた時、
//             marker[i].addListener("click", function(){
//                 // infoWindowを表示
//                 infoWindow[i].open(map, marker[i]);
//             });
//         } else {
//             // alert('Geocode was not successful for the following reason: ' + status);
//         }
//         });
//     }
// // var latitude = document.getElementById('topic_latitude').value
// // var longitude = document.getElementById('topic_longitude').value
// // //    map.panTo(new google.maps.LatLng(35.680865,139.767036));
// // map.panTo(new google.maps.LatLng(latitude,longitude));
// }

</script>

<script src="https://maps.googleapis.com/maps/api/js?key=<%= @env %>&callback=initMap" async defer></script>